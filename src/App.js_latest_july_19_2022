import React, { Component } from 'react'
import Web3 from 'web3'
import logo from './logo.svg';
import './App.css';
import { VOTING_ABI, VOTING_ADDRESS } from './config'

class App extends Component {
        state = { votes: '' }
        componentWillMount(){
                this.loadBlockchainData()
        }
 
	async loadBlockchainData(){
                //const web3 = new Web3(new Web3.providers.HttpProvider("http://ec2-44-242-136-205.us-west-2.compute.amazonaws.com:8545"))

	const web3 = new Web3(new Web3.providers.HttpProvider("http://ec2-35-87-240-220.us-west-2.compute.amazonaws.com:8545"))

		this.setState( { web3 } )
		var account;

		// does not work right now - have to read in automatic


                web3.eth.getAccounts().then((f) => {
                        account = f[0];
                })
		// MOD THIS TO READ DIRCTLY FROM BUILD DIRECTORY
		// don't forget to copy latest contract to src dirctory
		// let jsonData = require('../../build/contract/Voting.json')
		//just copy the json file to the src directory
		let jsonData = require('./Voting.json');
		console.log(jsonData.abi)
		console.log(jsonData.networks)
		console.log(Object.keys(jsonData.networks).length)
           

///		console.log(jsonData['networks']["1658033255086"]["address"])
		var network_ids = jsonData['networks']	
		//var nth_address = jsonData['networks'].keys()	
		console.log("is this the answer")
		console.log ( Object.keys(jsonData['networks'])[Object.keys(jsonData.networks).length-1] )
                var networkKey =  Object.keys(jsonData['networks'])[Object.keys(jsonData.networks).length-1] 
		console.log(jsonData['networks'][networkKey]["address"] )

		//const contract = new web3.eth.Contract(VOTING_ABI);
                const contract = new web3.eth.Contract(jsonData.abi); 

		contract.options.address = "0xA0b66D268dd6fb203d00827306af843fAA5c0D51";

		// i need to copy in Voting.json to the right directory.
		contract.options.address = jsonData['networks'][networkKey]["address"] 
		this.setState( { contract }) 
                //contract.options.address = "0x71789831d83d4C8325b324eA9B5fFB27525480b5";

                const candidates = {"Johnny": "candidate-1", "Amber": "candidate-2"}

                console.log("one") 
                await contract.methods.totalVotesFor(web3.utils.asciiToHex('Johnny')).call(console.log)
		console.log("two")
                await contract.methods.voteForCandidate(web3.utils.asciiToHex('Johnny')).send({gas: 140000, from: '0xfd1c9Ca20C558cc3e28678Bd30D39519D68A1565' });

		console.log("three")

                await contract.methods.totalVotesFor(web3.utils.asciiToHex('Johnny')).call(console.log)

        }

  constructor(props){
	  	super(props)
	  	this.state = {
			account: '',
			JohnnyVote: 0,
			AmberVote: 0,
			loading: true
			//data: todoList   // new portion

		}

	console.log("constructor")

//  this.voteForCandidate = this.voteForCandidate.bind(this)

 //  this.voteForJohnny = this.voteForJohnny.bind(this)
 //  this.voteForAmber = this.voteForAmber.bind(this)

//	voteForCandidate = () =>  {

async voteForCandidate() { 
//async function 
// best so far ....    	voteForCandidate = () => {
//voteForCandidate: async () => { 
		voteForCandidate: async function (){      
	this.state.contract.methods.voteForCandidate(this.state.web3.utils.asciiToHex('Johnny')).send({gas: 140000, from: '0xfd1c9Ca20C558cc3e28678Bd30D39519D68A1565'  });
        console.log("voteForCandidate")
//	var count = await this.state.contract.methods.totalVotesFor(this.state.web3.utils.asciiToHex('Johnnh')).call();	
//	console.log('just before the count')
//	      console.log(count)
//	      this.setState((prevState) => ({ johnnyCount: prevState.johnnyCount + 1}));

  //    }

}
//    state = {
//      johnnyCount: 1
//     , amberCount: 1
//    }


 //   voteForJohnny = () => {
 ////       this.setState((prevState) =>({ johnnyCount : prevState.johnnyCount + 1 }));
//	console.log("vj   one"); 


  // this.state.contract.methods.voteForCandidate(this.state.web3.utils.asciiToHex('Johnny')).send({gas: 140000, from: '0x73a0f2A8C094931b24c9e8717F8bb2C582f1cA95'});
//	console.log("vj two");
 //  this.state.contract.methods.totalVotesFor(this.state.web3.utils.asciiToHex('Johnny')).call(console.log)
//
//
//
 //   };

//    voteForAmber = () => {
//        this.setState((prevState) => ({ amberCount : prevState.amberCount + 1   }));
 //   this.state.contract.methods.voteForCandidate(this.state.web3.utils.asciiToHex('Amber')).send({gas: 140000, from: '0x73a0f2A8C094931b24c9e8717F8bb2C582f1cA95'});

   // this.state.contract.methods.totalVotesFor(this.state.web3.utils.asciiToHex('Amber')).call(console.log)

  //  };


//      <button onClick={() => voteForCandidate()}> vote Again! </button>
}



render(){

        return (
            <>
                <div>
                    <button onClick={this.voteForCandidate}> Uni Instruction</button>
                    <button onClick={this.Scllevel}> School Instruction</button>
                </div>
                <h5>Johnny count: {this.state.johnnyCount}</h5>
                <h5>Amber count: {this.state.amberCount}</h5>
            </>
        );
    }





}
export default App;
